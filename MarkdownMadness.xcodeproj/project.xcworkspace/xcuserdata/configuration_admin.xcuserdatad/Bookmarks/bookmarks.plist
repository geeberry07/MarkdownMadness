<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>115</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>0</string>
					<key>Timestamp</key>
					<string>740284963.1492</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>MarkdownMadness/Documentation/Converting Documents.docc/Converting Documents.md</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string># ``MarkdownToolkit``

MarkdownToolkit is a comprehensive framework designed to provide a collection of reusable tools for Markdown rendering across various Apple platforms (iOS, macOS, watchOS, tvOS). It aims to simplify the development process by offering pre-built components and utilities, reducing boilerplate code and speeding up the implementation of Markdown features.

## Overview

MarkdownToolkit addresses the common struggles developers face in implementing Markdown rendering, offering a cohesive set of components that handle parsing, rendering, and styling Markdown content. By leveraging this toolkit, developers can focus more on application logic and user experience rather than reinventing Markdown rendering from scratch.

## Topics

### Core Protocols

Before diving into implementation details, let's define the core protocols that will serve as the foundation for MarkdownToolkit:

- **MarkdownRenderable**: Defines methods and properties for rendering Markdown content.
- **MarkdownStyleable**: Defines properties and methods for styling rendered Markdown content.
- **MarkdownConfigurable**: Defines properties and methods for configuring Markdown rendering process.

### Reusable Views

MarkdownToolkit provides the following reusable views tailored for Markdown content:

- **MarkdownTextView**: Displays Markdown-formatted text, conforming to MarkdownRenderable, MarkdownStyleable, and MarkdownConfigurable.
- **MarkdownLabel**: A label-like view for displaying Markdown-formatted text, similar to UILabel/NSTextField, also conforming to core protocols.
- **MarkdownWebView**: Renders Markdown using HTML/CSS for more complex scenarios.
- **MarkdownEditor**: Offers rich text editing with Markdown syntax support.

### Supporting Components

In addition to reusable views, MarkdownToolkit includes essential components for Markdown handling:

- **MarkdownParser**: Parses Markdown source into a structured representation.
- **MarkdownRenderer**: Renders parsed Markdown into desired formats.
- **MarkdownStyler**: Applies styles and formatting to the rendered Markdown content.
- **MarkdownUtilities**: Provides utility functions for common Markdown operations, such as syntax highlighting and image rendering.

## Pre-requisites

Before starting with MarkdownToolkit, ensure the following prerequisites are met:

- Clone the [swift-markdown-ui repository](https://github.com/SwiftStudies/swift-markdown-ui.git).
- Install a code editor or IDE (e.g., [Visual Studio Code](https://code.visualstudio.com/)) with Swift toolchain.
- Install Swift development toolchain from [swift.org](https://swift.org/getting-started/).
- Decide initial target platform(s) (e.g., iOS, macOS, watchOS, tvOS).
- Maintain a positive attitude towards learning and collaboration.

## Getting Started

Follow these steps to set up the MarkdownToolkit framework and start implementing Markdown rendering:

1. **Create iOS App Project:**
   - Open Xcode, create a new project (iOS App), select SwiftUI, and name it "MarkdownToolkit".

2. **Create MarkdownToolkit Framework:**
   - In Xcode, create a new project (Framework), name it "MarkdownToolkit" or a similar name, and select supported platforms (e.g., iOS, macOS).

3. **Set up Documentation using DocC:**
   - Enable Documentation Comments in Build Settings for the MarkdownToolkit project.
   - Create `MarkdownToolkit.docc` in the Documentation folder of your project.

4. **Project Structure:**
   - Organize components into logical folders: Models, Views, Controllers, Services, Extensions, Utilities.

5. **Implement Core Protocols:**
   - Create Swift files for MarkdownRenderable, MarkdownStyleable, and MarkdownConfigurable protocols in appropriate folders (e.g., Protocols or Models).
   - Define the requirements and methods for each protocol based on earlier descriptions.

6. **Implement Reusable Views:**
   - Develop SwiftUI View files for MarkdownTextView, MarkdownLabel, MarkdownWebView, and MarkdownEditor in the Views folder.
   - Implement the rendering logic, ensuring conformance to core protocols for flexibility and customization.

7. **Implement Supporting Components:**
   - Create Swift files for MarkdownParser, MarkdownRenderer, MarkdownStyler, and MarkdownUtilities in Services or Utilities folders.
   - Implement functionality to parse, render, style, and manage Markdown content effectively.

8. **Test and Iterate:**
   - Import reusable views into the MarkdownToolkit app project, pass sample Markdown content for testing.
   - Run the app on Simulator or physical devices to visualize rendered Markdown content.
   - Iterate on implementation, refining rendering logic, styling, and configurations as needed.

## Additional Resources

For further information and resources, explore:

- [Swift Programming Language Documentation](https://swift.org/documentation/)
- [Apple Developer Documentation](https://developer.apple.com/documentation/)
- [Apple Developer Support](https://developer.apple.com/support/)

## Troubleshooting

If encountering issues during setup or development, consider the following steps:

- **Validate Dependencies**: Verify installed dependencies (Swift toolchain, VSCode) are correct and up-to-date.
- **Review Documentation**: Refer to Apple's official documentation and community forums for troubleshooting assistance.
- **Utilize Debugging Tools**: Employ Xcode's debugging tools for identifying and resolving code-related issues effectively.

## Directory Structure

MarkdownToolkit/
├── Documentation/
│ └── MarkdownToolkit.docc
├── Models/
├── Views/
│ ├── MarkdownTextView.swift
│ ├── MarkdownLabel.swift
│ ├── MarkdownWebView.swift
│ └── MarkdownEditor.swift
├── Controllers/
├── Services/
│ ├── MarkdownParser.swift
│ ├── MarkdownRenderer.swift
│ ├── MarkdownStyler.swift
│ └── MarkdownUtilities.swift
├── Extensions/
└── Utilities/
</string>
				<key>leading</key>
				<string></string>
				<key>trailing</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
